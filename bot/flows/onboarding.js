const User = require('../db/user-data');
const Audit = require('../db/user-audit');
const { isBhadrakPIN } = require('../validators/pin-validator');
const { getExactVillage } = require('../validators/village-corrector');
const { normalizeZodiac, zodiacList } = require('../validators/zodiac-helper');
const { isValidRole, getFormattedRole } = require('../validators/role-map');

function isStarterMessage(text) {
  const starters = ['hi', 'hello', 'joyguru', 'jayaguru', 'jayguru', 'рмЬрнЯрмЧрнБрм░рнБ'];
  return starters.includes(text.trim().toLowerCase());
}

async function handleOnboarding(msg, client, sessions) {
  const phone = msg.from;
  const text = msg.body.trim();
  const input = text.toLowerCase();

  // ЁЯУМ If confirming saved profile
  if (input === 'confirm' && sessions[phone]?.step === 'confirm') {
    const data = sessions[phone].data;
    const exists = await User.findOne({ phone });
    if (exists) {
      await client.sendText(phone, 'ЁЯз╛ You are already registered. Type "my info" to view your profile.');
      sessions[phone] = { complete: true };
      return;
    }

    try {
      const saved = await User.create({
        phone,
        name: data.name,
        pin: data.pin,
        village: data.village,
        villageOdia: data.villageOdia,
        birthday: data.birthday,
        zodiac: data.zodiac,
        role: data.role,
        gender: data.gender || 'Not Provided',
        onboardingStatus: 'complete'
      });

      console.log('тЬЕ MongoDB SAVE SUCCESS:', saved);
      sessions[phone] = { complete: true };
      await client.sendText(phone, `тЬЕ Welcome, ${data.name.split(' ')[0]}! You are now part of DPWorks.\nJoyguru ЁЯЩП`);
    } catch (err) {
      console.error(`тЭМ Failed to save user ${phone}:`, err.message);
      await client.sendText(phone, 'тЭМ Something went wrong while saving. Please type "Hi" to try again.');
      delete sessions[phone];
    }
    return;
  }

  if (input === 'edit') {
    delete sessions[phone];
    await client.sendText(phone, 'ЁЯФБ Restarting... Type "Hi" to begin again.');
    return;
  }

  if (sessions[phone]?.complete) {
    await client.sendText(phone, 'ЁЯЩП You are already registered. Type "my info" to view your profile.');
    return;
  }

  if (!sessions[phone]) {
    if (!isStarterMessage(text)) {
      await client.sendText(phone, 'ЁЯЩП Please type *"Joyguru"* to begin onboarding.\n\nрмжрнЯрм╛рмХрм░рм┐ *Joyguru рммрм╛ рмЬрнЯрмЧрнБрм░рнБ* рмЯрм╛рмЗрмкрнН рмХрм░рмирнНрмдрнБред');
      return;
    }
    sessions[phone] = { step: 0, data: {} };
  }

  const session = sessions[phone];
  const reply = (txt) => client.sendText(phone, txt);

  switch (session.step) {
    case 0:
      session.step++;
      await reply('ЁЯЩП рмЬрнЯрмЧрнБрм░рнБ! Please tell me your name ЁЯСд\n\nрмжрнЯрм╛рмХрм░рм┐ рмирм┐рмЬ рмирм╛рмо рмХрнБрм╣рмирнНрмдрнБред');
      break;

    case 1:
      session.data.name = text;
      session.step++;
      await reply('ЁЯУН Enter your 6-digit PIN code:\n\nрмжрнЯрм╛рмХрм░рм┐ рмирм┐рмЬ рмкрм┐рми рмХрнЛрмбрнН рмХрнБрм╣рмирнНрмдрнБред');
      break;

    case 2:
      if (!/^\d{6}$/.test(text) || !isBhadrakPIN(text)) {
        await reply('тЭМ Invalid or unsupported PIN. Only Bhadrak PINs allowed.\n\nрмнрмжрнНрм░рмХ рмЕрмЮрнНрмЪрм│рм░ 6 рмЕрмЩрнНрмХрм░ PIN рмХрнЛрмбрнН рмжрм┐рмЕрмирнНрмдрнБред');
        return;
      }
      session.data.pin = text;
      session.step++;
      await reply('ЁЯПб What is your village name?\n\nрмжрнЯрм╛рмХрм░рм┐ рмЧрнНрм░рм╛рмо рмирм╛рмо рмХрнБрм╣рмирнНрмдрнБред');
      break;

    case 3:
      const villageMatch = getExactVillage(text);
      session.data.villageAttempts = (session.data.villageAttempts || 0) + 1;

      if (!villageMatch && session.data.villageAttempts < 3) {
        await reply('тЭМ Village not recognized. Please try again.\n\nрмПрм╣рм┐ рмЧрнНрм░рм╛рмо рмирм╛рмо рморм┐рм│рм┐рм▓рм╛ рмирм╛рм╣рм┐рмБред рмжрнЯрм╛рмХрм░рм┐ рмкрнБрмгрм┐ рмЪрнЗрм╖рнНрмЯрм╛ рмХрм░рмирнНрмдрнБред');
        return;
      }

      if (!villageMatch && session.data.villageAttempts >= 3) {
        session.step++;
        session.data.village = text;
        session.data.villageOdia = 'тЫФ Not Matched';
        await reply(`тЪая╕П Are you sure the village name "${text}" is correct?\n\nIf yes, please continue with your gender (Male/Female/Other).`);
        return;
      }

      session.data.village = villageMatch.en;
      session.data.villageOdia = villageMatch.or;
      session.step++;
      await reply('ЁЯзС What is your gender?\n\nType: Male, Female or Other.\n\nрмирм┐рмЬ Gender рмХрнБрм╣рмирнНрмдрнБ: Male / Female / Other');
      break;

    case 4:
      const gender = input;
      if (!['male', 'female', 'other'].includes(gender)) {
        await reply('тЭМ Please type "Male", "Female", or "Other".\n\nрмжрнЯрм╛рмХрм░рм┐ "Male", "Female" рммрм╛ "Other" рмЯрм╛рмЗрмкрнН рмХрм░рмирнНрмдрнБред');
        return;
      }
      session.data.gender = gender[0].toUpperCase() + gender.slice(1).toLowerCase();
      session.step++;
      await reply('ЁЯОВ Your date of birth (DD-MM-YYYY)?\n\nрмЬрмирнНрмо рмдрм╛рм░рм┐рмЦ рмХрм╣рмирнНрмдрнБ (DD-MM-YYYY)ред');
      break;

    case 5:
      if (!/^\d{2}-\d{2}-\d{4}$/.test(text)) {
        await reply('тЭМ Format error. Use DD-MM-YYYY.\nрмЙрмжрм╛рм╣рм░рмг: 15-08-1990');
        return;
      }
      session.data.birthday = text;
      session.step++;
      await reply('ЁЯФо Your zodiac sign (English or Odia)?\n\nрм░рм╛рм╢рм┐ рмирм╛рмо рмХрм╣рмирнНрмдрнБ (рмУрмбрм╝рм┐рмЖ/English)');
      break;

    case 6:
      const z = normalizeZodiac(input);
      if (!z) {
        await reply(`тЭМ Zodiac not recognized.\n\nValid options:\n${zodiacList()}`);
        return;
      }
      session.data.zodiac = `${z.or} (${z.en})`;
      session.step++;
      await reply('ЁЯОЦя╕П What is your role?\nOptions: Field Worker, JK, ADJ, Ritwick, Block Coordinator, District Admin');
      break;

    case 7:
      if (!isValidRole(input)) {
        await reply('тЭМ Invalid role. Choose from:\nField Worker, JK, ADJ, Ritwick, Block Coordinator, District Admin');
        return;
      }
      session.data.role = getFormattedRole(text);
      session.step = 'confirm';

      const data = session.data;
      const summary = `ЁЯз╛ Please review your details:\n\nЁЯСд Name: ${data.name}\nЁЯУН PIN: ${data.pin}\nЁЯПб Village: ${data.village} (${data.villageOdia})\nЁЯОВ DOB: ${data.birthday}\nЁЯФо Zodiac: ${data.zodiac}\nЁЯОЦя╕П Role: ${data.role}\nЁЯзС Gender: ${data.gender || 'Not Provided'}\n\nЁЯСЙ Type "confirm" to save or "edit" to restart.`;
      await client.sendText(phone, summary);
      break;
  }

  await Audit.create({
    phone,
    message: text,
    type: 'inbound',
    context: 'onboarding'
  });
}

module.exports = handleOnboarding;
